// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace RentManagerAPI.Migrations
{
    [DbContext(typeof(RentDbContext))]
    [Migration("20241022180916_AddPropertyTableAndRelationShipWithPerson")]
    partial class AddPropertyTableAndRelationShipWithPerson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Persons.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PersonType")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("RentedPropertyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RentedPropertyId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Models.Properties.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<double>("BuiltArea")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentLesseeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("LastRentedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LessorId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonthlyRent")
                        .HasColumnType("numeric");

                    b.Property<double>("TotalArea")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Usage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentLesseeId")
                        .IsUnique();

                    b.HasIndex("LessorId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Models.Persons.Person", b =>
                {
                    b.HasOne("Models.Properties.Property", "RentedProperty")
                        .WithMany("PreviousLessees")
                        .HasForeignKey("RentedPropertyId");

                    b.Navigation("RentedProperty");
                });

            modelBuilder.Entity("Models.Properties.Property", b =>
                {
                    b.HasOne("Models.Persons.Person", "CurrentLessee")
                        .WithOne()
                        .HasForeignKey("Models.Properties.Property", "CurrentLesseeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Models.Persons.Person", "Lessor")
                        .WithMany("OwnedProperties")
                        .HasForeignKey("LessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentLessee");

                    b.Navigation("Lessor");
                });

            modelBuilder.Entity("Models.Persons.Person", b =>
                {
                    b.Navigation("OwnedProperties");
                });

            modelBuilder.Entity("Models.Properties.Property", b =>
                {
                    b.Navigation("PreviousLessees");
                });
#pragma warning restore 612, 618
        }
    }
}
